// Generated by CoffeeScript 1.6.3
var HScroll,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

HScroll = (function() {
  function HScroll(element, options) {
    if (options == null) {
      options = {};
    }
    this._updateScrollPosition = __bind(this._updateScrollPosition, this);
    this._mouseMoveHandler = __bind(this._mouseMoveHandler, this);
    this._mouseOutHandler = __bind(this._mouseOutHandler, this);
    this._mouseOverHandler = __bind(this._mouseOverHandler, this);
    this.element = element.nodeType != null ? element : document.querySelector(element);
    this.mouseover = false;
    this.mouseX = 0;
    this.targetScrollLeft = 0;
    this.speed = options.speed || 100;
    this.transform = options.transform || false;
    this.element.style.overflow = "hidden";
    this.element.addEventListener("mouseover", this._mouseOverHandler);
    this.element.addEventListener("mouseout", this._mouseOutHandler);
    this.element.addEventListener("mousemove", this._mouseMoveHandler);
    this._updateScrollPosition();
  }

  HScroll.prototype._mouseOverHandler = function(event) {
    return this.mouseover = true;
  };

  HScroll.prototype._mouseOutHandler = function(event) {
    return this.mouseover = false;
  };

  HScroll.prototype._mouseMoveHandler = function(event) {
    return this.mouseX = event.clientX - this.element.offsetLeft;
  };

  HScroll.prototype._trackMousePosition = function() {
    var elementWidth, position, scaledPosition, scrollDelta;
    elementWidth = this.transform ? this.element.parentNode.offsetWidth : this.element.offsetWidth;
    position = this.mouseX / elementWidth;
    scaledPosition = position * 2 - 1;
    scrollDelta = Math.pow(scaledPosition, 7);
    scrollDelta = Math.round(scrollDelta * 1000) / 1000;
    this.targetScrollLeft += scrollDelta * this.speed;
    return this.targetScrollLeft = Math.max(0, Math.min(this.targetScrollLeft, this.element.scrollWidth - elementWidth));
  };

  HScroll.prototype._updateScrollPosition = function() {
    var _this = this;
    return this.animationFrameID = requestAnimationFrame(function() {
      _this._update();
      return _this.animationFrameID = requestAnimationFrame(_this._updateScrollPosition);
    });
  };

  HScroll.prototype._update = function() {
    if (this.mouseover) {
      this._trackMousePosition();
    }
    if (this.transform) {
      return this.element.style.transform = "translateX(" + (-this.targetScrollLeft) + "px)";
    } else {
      return this.element.scrollLeft = this.targetScrollLeft;
    }
  };

  HScroll.prototype.destroy = function() {
    cancelAnimationFrame(this.animationFrameID);
    this.element.removeEventListener("mouseover", this._mouseOverHandler);
    this.element.removeEventListener("mouseout", this._mouseOutHandler);
    this.element.removeEventListener("mousemove", this._mouseMoveHandler);
    return this;
  };

  return HScroll;

})();
