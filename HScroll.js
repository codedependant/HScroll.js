// Generated by CoffeeScript 1.8.0
var HScroll,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

HScroll = (function() {
  function HScroll(element, options) {
    if (options == null) {
      options = {};
    }
    this._updateScrollPosition = __bind(this._updateScrollPosition, this);
    this._mouseMoveHandler = __bind(this._mouseMoveHandler, this);
    this._mouseLeaveHandler = __bind(this._mouseLeaveHandler, this);
    this._mouseOverHandler = __bind(this._mouseOverHandler, this);
    this._mouseEnterHandler = __bind(this._mouseEnterHandler, this);
    this.element = element.nodeType != null ? element : document.querySelector(element);
    this.mouseover = false;
    this.mouseX = 0;
    this.targetScrollLeft = 0;
    this.scrollDelta = 0;
    this.speed = options.speed || 100;
    this.transform = options.transform || false;
    this.acceleration = options.acceleration || .7;
    this.velocity = 0;
    this.position = 0;
    this.element.addEventListener("mouseover", this._mouseOverHandler);
    this.element.addEventListener("mouseenter", this._mouseEnterHandler);
    this.element.addEventListener("mouseleave", this._mouseLeaveHandler);
    this.element.addEventListener("mousemove", this._mouseMoveHandler);
    this._updateWidths();
    window.addEventListener("resize", this._updateWidths);
  }

  HScroll.prototype._mouseEnterHandler = function(event) {
    return this._updateScrollPosition();
  };

  HScroll.prototype._mouseOverHandler = function(event) {
    this.mouseover = true;
    if (this.animationFrameID == null) {
      return this._updateScrollPosition();
    }
  };

  HScroll.prototype._mouseLeaveHandler = function(event) {
    this.mouseover = false;
    return this._stopUpdates();
  };

  HScroll.prototype._mouseMoveHandler = function(event) {
    return this.mouseX = event.clientX - this.element.offsetLeft;
  };

  HScroll.prototype._trackMousePosition = function() {
    var position, scaledPosition;
    position = this.mouseX / this.elementWidth;
    scaledPosition = position * 2 - 1;
    this.scrollDelta = Math.pow(scaledPosition, 7);
    this.scrollDelta = Math.round(this.scrollDelta * 1000) / 1000;
    return this.velocity += this.scrollDelta * this.speed;
  };

  HScroll.prototype._updateScrollPosition = function() {
    return this.animationFrameID = requestAnimationFrame((function(_this) {
      return function() {
        _this._update();
        return _this.animationFrameID = requestAnimationFrame(_this._updateScrollPosition);
      };
    })(this));
  };

  HScroll.prototype._stopUpdates = function() {
    cancelAnimationFrame(this.animationFrameID);
    return delete this.animationFrameID;
  };

  HScroll.prototype._update = function() {
    this.velocity += this.scrollDelta * 20;
    this.velocity *= this.acceleration;
    this.position += this.velocity;
    this.scrollDelta = 0;
    this.position = Math.min(Math.max(0, this.position), this.maxWidth);
    if (this.mouseover) {
      this._trackMousePosition();
    }
    if (this.transform) {
      return this.element.style.transform = "translateX(" + (-this.position) + "px)";
    } else {
      return this.element.scrollLeft = this.position;
    }
  };

  HScroll.prototype._updateWidths = function() {
    this.elementWidth = this.transform ? this.element.parentNode.offsetWidth : this.element.offsetWidth;
    return this.maxWidth = this.element.scrollWidth - this.element.offsetWidth;
  };

  HScroll.prototype.destroy = function() {
    this._stopUpdates();
    window.removeEventListener("resize", this._updateWidths);
    this.element.removeEventListener("mouseover", this._mouseOverHandler);
    this.element.removeEventListener("mouseout", this._mouseOutHandler);
    this.element.removeEventListener("mousemove", this._mouseMoveHandler);
    return this;
  };

  return HScroll;

})();
